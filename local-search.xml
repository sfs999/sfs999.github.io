<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux环境搭建pytorch环境</title>
    <link href="/2023/03/28/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8pytorch%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/03/28/%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8pytorch%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>用来配置服务器python环境的记录 <div>            <input type="checkbox" disabled >搭建doctor          </div> <span id="more"></span></p><h1 id="安装mini-conda">1安装mini-conda</h1><p><ahref="https://docs.conda.io/en/latest/miniconda.html#linux-installers">官网</a>从官网下载对应版本，对应系统的安装包</p><p>将安装包传入linux系统 cd到目标文件目录： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">bash Miniconda3-4.7.12.1-Linux-x86_64.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><p>安装后重新加载配置文件 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">source .bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h1 id="基础命令">2基础命令</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda --version 查看安装的conda的版本，检验是否安装成功conda list：查看安装了哪些包。conda search XXXX:查找包的版本conda install package_name(包名)：安装包conda env list 或 conda info -e：查看当前存在哪些虚拟环境conda update conda：检查更新当前condaconda create -n 创建conda环境激活环境 conda activate XXX退出环境conda deactivate移除环境： conda&#x2F;mamba remove -n XXX --all导出环境： conda env export xxx.yaml 将现有的包导出，方便以后直接创建环境复现环境： conda env create -f environment.yamllsblk查看硬盘信息top 查看cpu使用情况lspci | grep -i nvidia  查看gpu情况<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>添加镜像 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">conda config --add channels genomedkconda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;conda-forge&#x2F;conda config --add channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud&#x2F;bioconda&#x2F;conda config --set show_channel_urls yes#查看已配置的镜像conda config --show#删除某个镜像源conda config --remove channels https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><h1 id="配置pytorch环境">3配置pytorch环境</h1><p>查看CUDA版本 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> <ahref="https://pytorch.org/get-started/locally">pytorch官网</a>选择对应的版本</p><p>判断是否安装成功 在命令行输入<code>python</code>输入<code>import torch</code>，没有报错说明安装成功</p><p>输入<code>torch.cuda.is_available()</code>，返回true表示可以使用GPU</p><h1 id="安装jupyter">4安装jupyter</h1><p><a href="https://zhuanlan.zhihu.com/p/166425946">源于</a> jupyternotebook安装 <code>conda install jupyter notebook</code> jupyter lab安装<code>conda install -c conda-forge jupyterlab</code> 使用pip安装中文界面<code>pip install jupyterlab-language-pack-zh-CN</code></p><p>生成jupyter密码密文密文生成有手动生成和自动生成两种方式。自动生成会保存在json文件中。手动生成在ipython中运行直接输出。密码用于本地访问服务器jupyter时需要输入的密码。</p><p>自动生成 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ jupyter notebook passwordEnter password:  Verify password: [NotebookPasswordApp] Wrote hashed password to &#x2F;home&#x2F;you&#x2F;.jupyter&#x2F;jupyter_notebook_config.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p>手动生成 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">## 打开ipython，输入from IPython.lib import passwdpasswd()## 提示输入密码和确认输入，完成后得到密文。Enter password: Verify password: &#39;sha1:********************************************&#39; ## 或者from notebook.auth import passwd; passwd()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure> 配置</p><p>生成密文后，有两种设置方式，访问jupyter。一种是修改配置文件，另一种为通过ssh启动。</p><p>方式一：修改配置文件查看配置文件是否存在：<code>~/.jupyter/jupyter_notebook_config.py</code>生成配置文件： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">jupyter notebook --generate-config或jupyter lab --generate-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></p><p>修改配置文件需要修改主要是四个地方，分别是IP地址，密文，浏览器，端口。<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">## 打开前面生成的配置文件vim ~&#x2F;.jupyter&#x2F;jupyter_notebook_config.py## 修改配置内容## 官方文档建议修改成‘*’，但可能还是无法访问，可以修改成‘0.0.0.1’或者服务器IP 目前不需改c.NotebookApp.ip&#x3D;&#39;*&#39;## 修改成将之前生成的密文 改shal:后面的内容c.NotebookApp.password &#x3D; u&#39;sha1:........&#39;c.NotebookApp.open_browser &#x3D; False## 随便都可以，防止与其他端口冲突即可。也可以再启动jupyter时，用--port参数指定。c.NotebookApp.port &#x3D;8889<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></p><p><a href="https://zhuanlan.zhihu.com/p/101070029">jupyterlab插件</a></p><p>服务器常用命令<code>nohup jupyter notebook &amp;</code>后台启动jupyter lab<code>pkill -f jupyter</code>杀死后台所有jupyter进程</p><p><code>htop</code>查看cpu占用情况 多内核jupyter</p><p><code>conda install nb_conda -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</code></p><h1 id="内网穿透">内网穿透</h1><p>跳板机 B to C<code>ssh -N -f -L 3333:localhost:8889 syf@172.19.4.27</code></p><p>打洞 <a href="https://www.cpolar.com/">cpolar</a></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux环境搭建docker和portainer</title>
    <link href="/2023/02/08/docker/"/>
    <url>/2023/02/08/docker/</url>
    
    <content type="html"><![CDATA[<p>目前进度是开机启动portainer服务，然后局域网内的计算机可以访问网址操作portainer接下来的问题： <div>            <input type="checkbox" disabled >必要的时候的远程桌面          </div> ：Windows自带，但需要一个HDMI诱骗器<div>            <input type="checkbox" disabled >wifi模块：外置天线          </div> <div>            <input type="checkbox" disabled >修改待机时间          </div></p><span id="more"></span><p>搭建过程：</p><h1 id="docker">1docker</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install \    ca-certificates \    curl \    gnupg \    lsb-releasecurl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo gpg --dearmor -o &#x2F;usr&#x2F;share&#x2F;keyrings&#x2F;docker-archive-keyring.gpgapt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.iosudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>Docker 安装完成，请检查是否出现 Hello from Docker!'</p><h1 id="portainer">2portainer</h1><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">sudo service docker restartsudo docker volume create portainer_datasudo docker run -d -p 8000:8000 -p 9443:9443 --name portainer \--restart&#x3D;always \-v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock \-v portainer_data:&#x2F;data \portainer&#x2F;portainer-ce:latestsudo docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>echo 'Portainer 安装完成，请检查是否出现portainer/portainer-ce:latest 字样' echo 'Web页面访问https://127.0.0.1:9443/' echo '或 https://服务器IP地址:9443/'</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>portainer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客的过程记录</title>
    <link href="/2023/02/02/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/02/02/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>依托于github完成个人博客的搭建过程，但目前只完成了基础部分 Todo:<div>            <input type="checkbox" disabled >评论功能          </div> <div>            <input type="checkbox" disabled >版权信息          </div> <div>            <input type="checkbox" disabled >页面个性化          </div> <div>            <input type="checkbox" disabled >云服务器部署          </div>  <ahref="https://developer.aliyun.com/plan/student">阿里云学生免费领取6个月</a><div>            <input type="checkbox" disabled >公网IP访问          </div> <span id="more"></span> # 本地建站 该部分引用于：<ahref="https://blog.csdn.net/qq_36759224/article/details/82121420?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167531679116782427495873%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=167531679116782427495873&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~hot_rank-6-82121420-null-null.142%5Ev72%5Epc_search_v2,201%5Ev4%5Eadd_ask&amp;utm_term=github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA">使用Github Pages 和 Hexo 搭建自己的独立博客【超级详细的小白教程】</a></p><p>需要安装的软件：</p><h2 id="node.js-官网">Node.js <ahref="https://nodejs.org/en/download/">官网</a></h2><h2 id="git-官网">Git <ahref="https://git-scm.com/download/win">官网</a></h2><p>检验Git是否安装成功 <figure><div class="code-wrapper"><pre class="line-numbers language-text" data-language="text"><code class="language-text">$ git --version  $ node -v  $ npm -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure></p><h2 id="hexo">Hexo</h2><p>  选择一个磁盘，新建一个文件夹，自己重命名文件夹（如：我的文件夹为：Ｅ_Blog），博客相关文件将储存在此文件夹下，在该文件夹下右键鼠标，点击Git Bash Here，输入以下 npm 命令即可安装，第一个命令表示安装hexo，第二个命令表示安装 hexo 部署到 git page 的deployer，如图所示即为安装成功</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-cli -g  $ npm install hexo-deployer-git --save <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="hexo-初始化配置">Hexo 初始化配置</h3><p>  在刚才新建的文件夹里面再次新建一个 Hexo文件夹（如：我的文件夹为：E_Blog）,进入该 Hexo 文件夹右键鼠标，点击 GitBash Here，输入以下命令，如图所示则安装成功 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><p>Hexo 安装完成后，将会在指定文件夹中新建所需要的文件，Hexo文件夹下的目录如下：</p><p><img src="https://s2.loli.net/2023/02/03/FWHCtJ7aLK42Tb8.png" /></p><h3 id="本地查看效果">本地查看效果</h3><p>执行以下命令，执行完即可登录 http://localhost:4000/ 查看效果<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ hexo generate  $ hexo server <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></p><p>显示以下信息说明操作成功： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">INFO Hexo is running at http:&#x2F;&#x2F;0.0.0.0:4000&#x2F;. Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h1 id="将博客部署到-github-pages-上">将博客部署到 Github Pages 上</h1><h2 id="创建项目代码库">创建项目代码库</h2><h2 id="配置-ssh-密钥">配置 SSH 密钥</h2><p> 只有配置好 SSH 密钥后，我们才可以通过 git 操作实现本地代码库与Github代码库同步，在你第一次新建的文件夹里面（如：我的文件夹为：Ｅ_Blog） GitBash Here 输入以下命令： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ ssh-keygen -t rsa -C &quot;your email@example.com&quot; &#x2F;&#x2F;引号里面填写你的邮箱地址，比如我的是tanrenhou@126.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure> 之后会出现： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Generating public&#x2F;private rsa key pair.  Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa):  &#x2F;&#x2F;到这里可以直接回车将密钥按默认文件进行存储<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure>然后会出现： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Enter passphrase (empty for no passphrase):  &#x2F;&#x2F;这里是要你输入密码，其实不需要输什么密码，直接回车就行 Enter same passphrase again:  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure> 接下来屏幕会显示： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Your identification has been saved in &#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.  Your public key has been saved in &#x2F;c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.  The key fingerprint is:  这里是各种字母数字组成的字符串，结尾是你的邮箱  The key&#39;s randomart image is:  这里也是各种字母数字符号组成的字符串  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>运行以下命令，将公钥的内容复制到系统粘贴板上： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ clip &lt; ~&#x2F;.ssh&#x2F;id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><h2 id="在-github-账户中添加你的公钥">在 GitHub 账户中添加你的公钥</h2><p>① 登陆 GitHub，进入 Settings：</p><p><img src="https://s2.loli.net/2023/02/03/IOt9dkMJeZ7USAz.png" /> ②点击 SSH and GPG Keys：</p><p><img src="https://s2.loli.net/2023/02/03/3oiftY57mMABQ6V.png" /> ③选择 New SSH key：</p><p><img src="https://s2.loli.net/2023/02/03/akIu3UeKdWZLNmP.png" /></p><p><img src="https://s2.loli.net/2023/02/03/3XlBmOodFgTCEQu.png" /></p><h2 id="测试">测试</h2><p>输入以下命令：注意：==git@github.com不要做任何更改！ #F44336==<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><p>之后会显示： <imgsrc="https://s2.loli.net/2023/02/03/Y7G12dexU5Zsluc.png" /> 输入 yes后会显示： <imgsrc="https://s2.loli.net/2023/02/03/YuJc1vgyqw5eAHG.png" /></p><p>此时表示设置正确 ## 配置 Git 个人信息  Git会根据用户的名字和邮箱来记录提交，GitHub也是用这些信息来做权限的处理，输入以下命令进行个人信息的设置，把名称和邮箱替换成你自己的，名字可以不是GitHub 的昵称，但为了方便记忆，建议与 GitHub 一致 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ git config --global user.name &quot;此处填你的用户名&quot;  $ git config --global user.email  &quot;此处填你的邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>到此为止 SSH Key 配置成功，本机已成功连接到 Github ## 将本地的 Hexo文件更新到 Github 的库中 ① 登录 Github 打开自己的项目 yourname.github.io</p><figure><img src="https://s2.loli.net/2023/02/03/A5K2S7qZcCT4RPH.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>② 鼠标移到 Clone or download 按钮，选择 Use SSH</p><p><img src="https://s2.loli.net/2023/02/03/A6lvTkcFjJ1GN92.png" /></p><p>③ 一键复制地址</p><p><img src="https://s2.loli.net/2023/02/03/coeP5YGCiI3KQH6.png" /></p><p>④ 打开你创建的 Hexo文件夹（如：E:_Blog），右键用记事本（Notepad++或者VScode等都可以）打开该文件夹下的 _config.yml 文件</p><p><img src="https://s2.loli.net/2023/02/03/Za9YGpBt348M6FU.png" /></p><p>⑤ 按下图修改 _config.yml 文件并保存 注意：master改为main <imgsrc="https://s2.loli.net/2023/02/03/JKRU7Cf8GpWDNOA.png" /></p><p>⑥ 在 Hexo 文件夹下分别执行以下命令 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">$ hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>执行完之后会让你输入你的 Github的账号和密码，如果此时报以下错误，说明你的 deployer 没有安装成功<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ERROR Deployer not found: git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></p><p>需要执行以下命令再安装一次： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> 再执行 hexo g-d，你的博客就会部署到 Github 上了 ⑦ 访问博客 等待博客构建完毕</p><p><img src="https://s2.loli.net/2023/02/03/XuNRrZEwhWdzaH9.png" /></p><p>你的博客地址：https://你的用户名.github.io,现在每个人都可以通过此链接访问你的博客了</p><h2 id="图床托管图片">图床托管图片</h2><h3 id="sm.ms-v2"><a href="https://smms.app/home/">sm.ms v2</a></h3><p>免费提供5G 存储空间 每分钟限制上传20张 可以作为图床来少量托管图片</p><h2 id="个性化fluid">个性化Fluid</h2><p>在_config.fluid.yml文件中查找对应位置进行修改</p><p>修改主界面标语</p><p> 查找关键词：Slogan</p><p>修改主页名称</p><p> 查找关键词：blog_title依托于github完成个人博客的搭建过程，但目前只完成了基础部分</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建本地GEE python环境的步骤</title>
    <link href="/2023/02/02/GEE%E6%9C%AC%E5%9C%B0py%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/02/02/GEE%E6%9C%AC%E5%9C%B0py%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>使用jupyter notebook搭建，避免安装客户端等操作最近要求学习GEE，由与想要部署本地的PY环境，在部署环境的过程中踩了一些坑，但参考大佬的文章最终成功部署了本地环境，以下为只需安装earthengine-api的部署方法本文写于2022年12月12日，该方法实测有效 <span id="more"></span> ###首先需要科学上网！！！</p><h3 id="注册谷歌账号并申请gee使用">注册谷歌账号并申请GEE使用</h3><p>关于注册谷歌账号的方法已经有很多了，这里给一个指路 本文参考: <ahref="https://blog.csdn.net/weixin_43536034/article/details/125326723?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167083736816782390539750%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167083736816782390539750&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125326723-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_control1&amp;utm_term=GEE%E8%B4%A6%E5%8F%B7&amp;spm=1018.2226.3001.4187">GEE学习系列——GEE账号注册</a></p><h3id="之后需要本地环境安装earthengine-api">之后需要本地环境安装earthengine-api</h3><p>此处需要安装好python pipjupter，由于都是通用工具，所以本文不再介绍</p><p>在终端中输入： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">pip install earthengine-api;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> 注意，pip安装包时要关闭代理</p><h3 id="jupter在线编程的实现">jupter在线编程的实现</h3><p>这里参考这篇文章： 谷歌网盘参考: <ahref="https://blog.csdn.net/weixin_43360896/article/details/108174759?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167030206516800182159539%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167030206516800182159539&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-4-108174759-null-null.142%5Ev67%5Ewechat,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_control1&amp;utm_term=gee%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83&amp;spm=1018.2226.3001.4187">GEE入门【1】|Python环境配置</a></p><p>根据文章中的内容注册好谷歌网盘后再根据 <imgsrc="https://img-blog.csdnimg.cn/fc3fdeabd0fd4805bf8c3ba78e1d84e7.png#pic_center"alt="在这里插入图片描述" /> 中的本地jupter连接方法 首先在终端中执行<figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">pip install jupyter_http_over_wsjupyter serverextension enable --py jupyter_http_over_ws<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure> 安装网页扩展包并确认jupter版本符合</p><p>之后在本地终端执行jupter <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">jupyter notebook --NotebookApp.allow_origin&#x3D;&#39;https:&#x2F;&#x2F;colab.research.google.com&#39; --port&#x3D;8888 --NotebookApp.port_retries&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure> 在在线环境中连接本地环境</p><figure><imgsrc="https://img-blog.csdnimg.cn/f27f460d0eb244af8e67b9cb83643944.png#pic_center"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>将jupter网址填入</p><figure><imgsrc="https://img-blog.csdnimg.cn/704053a29b58477894b3f89fa47c7761.png#pic_center"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><p>之后执行代码： <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">import eeee.Authenticate()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure>如果出现这样则点击连接进行授权，可以避免谷歌客户端包等下载 <imgsrc="https://img-blog.csdnimg.cn/0cbd2a5b81d14566bb9a3801381d6215.png#pic_center"alt="在这里插入图片描述" />将授权码填入后回车，此时该设备已经授权完成。</p><h3 id="关于本地接口的设置">关于本地接口的设置</h3><p>接口的设置参考: <ahref="https://blog.csdn.net/awdwd233333/article/details/123394694?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=gee%20python&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-123394694.142%5Ev67%5Ewechat,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_control1&amp;spm=1018.2226.3001.4187">【笔记】GEE之python学习</a></p><p>在本地的编译器交互窗口，或者jupter中完成GEE的初始化 <figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">#初始化本地GEE服务import eeimport osos.environ[&#39;HTTP_PROXY&#39;] &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:1111&#39;os.environ[&#39;HTTPS_PROXY&#39;] &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:1111&#39;ee.Initialize()#print(ee.Image(&#39;USGS&#x2F;SRTMGL1_003&#39;).getInfo())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>这里'http://127.0.0.1:1111'中后四位为你电脑代理的端口，此处若有问题请自行百度</p><p>之后就可以完全本地连接GEE进行编程了</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GEE</tag>
      
      <tag>GEE_learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
